# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_motionplanning', [dirname(__file__)])
        except ImportError:
            import _motionplanning
            return _motionplanning
        if fp is not None:
            try:
                _mod = imp.load_module('_motionplanning', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _motionplanning = swig_import_helper()
    del swig_import_helper
else:
    import _motionplanning
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def setRandomSeed(*args):
  return _motionplanning.setRandomSeed(*args)
setRandomSeed = _motionplanning.setRandomSeed

def setPlanType(*args):
  return _motionplanning.setPlanType(*args)
setPlanType = _motionplanning.setPlanType

def setPlanSetting(*args):
  return _motionplanning.setPlanSetting(*args)
setPlanSetting = _motionplanning.setPlanSetting

def destroy():
  return _motionplanning.destroy()
destroy = _motionplanning.destroy
class CSpaceInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSpaceInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSpaceInterface, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _motionplanning.new_CSpaceInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _motionplanning.delete_CSpaceInterface
    __del__ = lambda self : None;
    def destroy(self): return _motionplanning.CSpaceInterface_destroy(self)
    def setFeasibility(self, *args): return _motionplanning.CSpaceInterface_setFeasibility(self, *args)
    def setVisibility(self, *args): return _motionplanning.CSpaceInterface_setVisibility(self, *args)
    def setVisibilityEpsilon(self, *args): return _motionplanning.CSpaceInterface_setVisibilityEpsilon(self, *args)
    def setSampler(self, *args): return _motionplanning.CSpaceInterface_setSampler(self, *args)
    def setNeighborhoodSampler(self, *args): return _motionplanning.CSpaceInterface_setNeighborhoodSampler(self, *args)
    def setDistance(self, *args): return _motionplanning.CSpaceInterface_setDistance(self, *args)
    def setInterpolate(self, *args): return _motionplanning.CSpaceInterface_setInterpolate(self, *args)
    __swig_setmethods__["index"] = _motionplanning.CSpaceInterface_index_set
    __swig_getmethods__["index"] = _motionplanning.CSpaceInterface_index_get
    if _newclass:index = _swig_property(_motionplanning.CSpaceInterface_index_get, _motionplanning.CSpaceInterface_index_set)
CSpaceInterface_swigregister = _motionplanning.CSpaceInterface_swigregister
CSpaceInterface_swigregister(CSpaceInterface)

class PlannerInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlannerInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlannerInterface, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _motionplanning.new_PlannerInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _motionplanning.delete_PlannerInterface
    __del__ = lambda self : None;
    def destroy(self): return _motionplanning.PlannerInterface_destroy(self)
    def setEndpoints(self, *args): return _motionplanning.PlannerInterface_setEndpoints(self, *args)
    def addMilestone(self, *args): return _motionplanning.PlannerInterface_addMilestone(self, *args)
    def planMore(self, *args): return _motionplanning.PlannerInterface_planMore(self, *args)
    def getPathEndpoints(self): return _motionplanning.PlannerInterface_getPathEndpoints(self)
    def getPath(self, *args): return _motionplanning.PlannerInterface_getPath(self, *args)
    def getData(self, *args): return _motionplanning.PlannerInterface_getData(self, *args)
    def dump(self, *args): return _motionplanning.PlannerInterface_dump(self, *args)
    __swig_setmethods__["index"] = _motionplanning.PlannerInterface_index_set
    __swig_getmethods__["index"] = _motionplanning.PlannerInterface_index_get
    if _newclass:index = _swig_property(_motionplanning.PlannerInterface_index_get, _motionplanning.PlannerInterface_index_set)
PlannerInterface_swigregister = _motionplanning.PlannerInterface_swigregister
PlannerInterface_swigregister(PlannerInterface)

# This file is compatible with both classic and new-style classes.


