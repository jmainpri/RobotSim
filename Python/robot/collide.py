# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_collide', [dirname(__file__)])
        except ImportError:
            import _collide
            return _collide
        if fp is not None:
            try:
                _mod = imp.load_module('_collide', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _collide = swig_import_helper()
    del swig_import_helper
else:
    import _collide
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _collide.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _collide.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _collide.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _collide.doubleArray___setitem__(self, *args)
    def cast(self): return _collide.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _collide.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_collide.doubleArray_frompointer)
doubleArray_swigregister = _collide.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _collide.doubleArray_frompointer(*args)
doubleArray_frompointer = _collide.doubleArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _collide.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _collide.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _collide.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _collide.intArray___setitem__(self, *args)
    def cast(self): return _collide.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _collide.intArray_frompointer
    if _newclass:frompointer = staticmethod(_collide.intArray_frompointer)
intArray_swigregister = _collide.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _collide.intArray_frompointer(*args)
intArray_frompointer = _collide.intArray_frompointer


def newGeom():
  """newGeom() -> int"""
  return _collide.newGeom()

def destroyGeom(*args):
  """destroyGeom(int geom)"""
  return _collide.destroyGeom(*args)

def makeTriMeshGeom(*args):
  """
    makeTriMeshGeom(int geom, char const * fn)
    makeTriMeshGeom(int geom, double const * verts, int const * inds, int nv, int nt)
    """
  return _collide.makeTriMeshGeom(*args)

def setTriMeshTranslation(*args):
  """setTriMeshTranslation(int geom, double const [3] t)"""
  return _collide.setTriMeshTranslation(*args)

def setTriMeshRotation(*args):
  """setTriMeshRotation(int geom, double const [9] r)"""
  return _collide.setTriMeshRotation(*args)

def getTriMeshTranslation(*args):
  """getTriMeshTranslation(int geom)"""
  return _collide.getTriMeshTranslation(*args)

def getTriMeshRotation(*args):
  """getTriMeshRotation(int geom)"""
  return _collide.getTriMeshRotation(*args)

def getTriMeshBB(*args):
  """getTriMeshBB(int geom)"""
  return _collide.getTriMeshBB(*args)

def getTriMeshNumVerts(*args):
  """getTriMeshNumVerts(int geom) -> int"""
  return _collide.getTriMeshNumVerts(*args)

def getTriMeshNumTris(*args):
  """getTriMeshNumTris(int geom) -> int"""
  return _collide.getTriMeshNumTris(*args)

def getTriMeshVerts(*args):
  """getTriMeshVerts(int geom) -> double *"""
  return _collide.getTriMeshVerts(*args)

def getTriMeshTris(*args):
  """getTriMeshTris(int geom) -> int *"""
  return _collide.getTriMeshTris(*args)

def makePointGeom(*args):
  """makePointGeom(int geom, double const [3] x)"""
  return _collide.makePointGeom(*args)

def makeSphereGeom(*args):
  """makeSphereGeom(int geom, double const [3] c, double r)"""
  return _collide.makeSphereGeom(*args)

def makeRayGeom(*args):
  """makeRayGeom(int geom, double const [3] s, double const [3] d)"""
  return _collide.makeRayGeom(*args)

def makeLineGeom(*args):
  """makeLineGeom(int geom, double const [3] s, double const [3] d)"""
  return _collide.makeLineGeom(*args)

def makeSegmentGeom(*args):
  """makeSegmentGeom(int geom, double const [3] a, double const [3] b)"""
  return _collide.makeSegmentGeom(*args)

def makeAABBGeom(*args):
  """makeAABBGeom(int geom, double const [3] bmin, double const [3] bmax)"""
  return _collide.makeAABBGeom(*args)

def makeGroupGeom(*args):
  """makeGroupGeom(int geom, int * geoms, int numgeoms)"""
  return _collide.makeGroupGeom(*args)

def collide(*args):
  """collide(int geom1, int geom2) -> bool"""
  return _collide.collide(*args)

def withinTolerance(*args):
  """withinTolerance(int geom1, int geom2, double tol) -> bool"""
  return _collide.withinTolerance(*args)

def distance(*args):
  """distance(int geom1, int geom2, double relErr, double absErr) -> double"""
  return _collide.distance(*args)

def closestPoints(*args):
  """closestPoints(int geom1, int geom2)"""
  return _collide.closestPoints(*args)

def rayCast(*args):
  """rayCast(int geom, double const [3] s, double const [3] d) -> bool"""
  return _collide.rayCast(*args)

def makeCollQuery(*args):
  """makeCollQuery(int geom1, int geom2) -> int"""
  return _collide.makeCollQuery(*args)

def destroyCollQuery(*args):
  """destroyCollQuery(int query)"""
  return _collide.destroyCollQuery(*args)

def queryCollide(*args):
  """queryCollide(int query) -> bool"""
  return _collide.queryCollide(*args)

def queryWithinTolerance(*args):
  """queryWithinTolerance(int query, double tol) -> bool"""
  return _collide.queryWithinTolerance(*args)

def queryDistance(*args):
  """queryDistance(int query, double relErr, double absErr) -> double"""
  return _collide.queryDistance(*args)

def queryClosestPoints(*args):
  """queryClosestPoints(int query)"""
  return _collide.queryClosestPoints(*args)

def queryTolerancePoints(*args):
  """queryTolerancePoints(int query)"""
  return _collide.queryTolerancePoints(*args)

def destroy():
  """destroy()"""
  return _collide.destroy()
# This file is compatible with both classic and new-style classes.


